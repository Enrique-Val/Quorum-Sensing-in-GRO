////////////////////////////////////////////////////////////////////////////
// 
//   gro 
// 
//   Copyright (c) 2011-2012 Eric Klavins, University of Washington
//   For more information, email klavins@uw.edu
// 
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the GNU General Public License
//   as published by the Free Software Foundation; either version 2
//   of the License, or (at your option) any later version.
// 
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
// 
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
// 
// 

// Coded by Enrique Valero.
// Program distributed under GNU General Public License v3

include gro

set ( "dt", 0.1 );

// Initialize the simulation parameters
diffusion_rate := 1;      // signal diffusion rate
degradation_rate := 0.0001;   // signal degradation rate
emission_rate := 0.2;    // signal emission rate
signal_adjustment := 0.2;

// Define a signal molecule
ahl := signal( diffusion_rate, degradation_rate ); 

// Protein synthesis parameters:
LuxR_prima :=0.5; // LuxR concentration

alpha_c := 1; // CI synthesis rate
alpha_l1 := 1; // LacI synthesis rate
alpha_l2 := 1; // LacIM1 synthesis rate
alpha_g := 2; // GFP transcription rate

beta_c := 0.008; // CI repression coefficient
beta_l := 0.8*0.25; // LacI repression coefficient
beta_lm1 := 0.8*1.2*0.5; // LacIM1 repression coefficient (slightly less repression than LacI)

gamma_r := 0.0231; // LuxR decay
gamma_c := 0.0692; // CI decay
gamma_l := 0.0231; // LacI decay
gamma_g := 0.0692; // GFP decay

eta1 := 2; // Transcription factor (LacI)
eta2 := 2; // Transcription factor (CI)
eta3 := 1; // Transcription factor (LuxR)

theta_r := 0.01; // LuxR/AHL activation coefficiente

rho_r := 0.5; //LuxR/AHL dimerization



program pattern_formation() := {
	gfp_temp := 0;
	rfp_temp := 0;
	rfp := 0;
	gfp := 0;
	LuxR := 0;
	LacIM1 := 0;
	CI := 0;
	LacI := 0;
	
	// Emit AHL
	rate(emission_rate) : {
		emit_signal(ahl,0.015);
	}
	
	// LuxR
	true : {
		LuxR := LuxR + rho_r*LuxR_prima^2*(get_signal(ahl)*signal_adjustment)^2- gamma_r*LuxR;
	};
	
	// CI
	true : {
		CI := CI + (alpha_c*LuxR^eta3)/(theta_r^eta3 + LuxR^eta3) - gamma_c*CI;
	};
	
	// LacI
	true : {
		LacI := LacI + alpha_l1/(1+(CI/beta_c)^eta2) - gamma_l * LacI;
	};
	
	// LacIM1
	true : {
		LacIM1 := LacIM1 + (alpha_l2*LuxR^eta3)/(theta_r^eta3 + LuxR^eta3) - gamma_l * LacIM1;
	};
	
	// GFP 
	true : {
		gfp_temp := gfp_temp + alpha_g/(1+(LacI/beta_l)^eta1) - gamma_g * gfp_temp;
	}
	
	// RFP 
	true : {
		rfp_temp := rfp_temp + alpha_g/(1+(LacIM1/beta_lm1)^eta1) - gamma_g * rfp_temp;
	}
	
	gfp_temp < 0 : {
		gfp_temp := 0;
	};
	
	rfp_temp < 0 : {
		rfp_temp := 0;
	};
	
	
	
	true : {gfp := gfp_temp* 10;};
	true : {rfp := rfp_temp* 10;};
	selected : {print("signal: " ,get_signal(ahl)*signal_adjustment, "LuxR", LuxR, " LacIM1: ", LacIM1 , " CI: ", CI , "  LacI: ", LacI);};

};

program main() := {
	ecoli ( [], program pattern_formation() );

};