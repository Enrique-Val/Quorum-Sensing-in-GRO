////////////////////////////////////////////////////////////////////////////
// 
//   gro 
// 
//   Copyright (c) 2011-2012 Eric Klavins, University of Washington
//   For more information, email klavins@uw.edu
// 
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the GNU General Public License
//   as published by the Free Software Foundation; either version 2
//   of the License, or (at your option) any later version.
// 
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
// 
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
// 
// 

// Coded by Enrique Valero.
// Program distributed under GNU General Public License v3

include gro

set ( "dt", 0.1 );

// Initialize the simulation parameters
diffusion_rate := 2;      // signal diffusion rate
degradation_rate := 0.05;   // signal degradation rate
emission_rate := 0.05;    // signal emission rate
minimum_concentration := 0.005; 
maximum_concentration := 0.02;

// Define a signal molecule
ahl := signal( diffusion_rate, degradation_rate ); 

program pattern_formation() := {
	gfp := 0;
	get_signal(ahl) > minimum_concentration & get_signal(ahl) < maximum_concentration : {
		gfp := gfp + 1;
	};
  
	gfp >0 & (get_signal(ahl) < minimum_concentration |  get_signal(ahl) > maximum_concentration) : {
		gfp := gfp - 1;
	};
	selected : {print(get_signal(ahl));};
};

program main() := {
	ecoli ( [], program pattern_formation() );	
	true : {
		set_signal(ahl,0,0,2);
	}

};